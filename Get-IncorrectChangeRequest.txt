param ([string]$info="ugNfDglt2opgaXvaBEpO")
<#

Project Reporting script for VSTS

This script sends emails to all developers, testers, and product managers notifying them
of Open workitems list and send a gentle reminder to the Workitem owner and respective leads to say hey from these Many days your workitem is pending


#>
Add-Type -AssemblyName System.Web

# Get the script directory
$path= "common.ps1"
# # Load and execute the common library script
$commonLibContent = Get-Content -Path $Path -Raw
Invoke-Expression -Command $commonLibContent


$queryId = "Query ID"
$PATId = "PAT Id"


$headers = @{
    Authorization = "Basic " + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$($PATId)"))
}

$WorkitemsQueryUri = "https://$($organization).visualstudio.com/DefaultCollection/_apis/wit/wiql/$($queryId)?api-version=4.1"
$WorkitemsQueryResult = Invoke-RestMethod -Uri $WorkitemsQueryUri -Method Get -Headers $headers 

# $workItemRelationsCount = $WorkitemsQueryResult.workItemRelations.Count
$workItemIds = $WorkitemsQueryResult.workItemRelations
$approvedWorkitemHtml += "<br>"
$approvedWorkitemHtml += "<b>Approved List</b>"
$approvedWorkitemHtml +="<tbody><table border='1' cellspacing='1' style='font-size:10px; border:1px solid black; border-collapse: collapse' nowrap>
        <tr style='font-size:12px;'>
            <th valign='top' nowrap><b>Task/PBI ID</b></th>
            <th valign='top' nowrap><b>Work Item Type</b></th>
            <th valign='top' nowrap><b>Task/PBI Description</b></th>
            <th valign='top' nowrap><b>Tags</b></th>
            <th valign='top' nowrap><b>Approval status</b></th>
            <th valign='top' nowrap><b>State</b></th>
        
        </tr>"
$notapprovedWorkitemHtml += "<br>"
$notapprovedWorkitemHtml += "<b>Not Approved List</b>"
$notapprovedWorkitemHtml +="<tbody><table border='1' cellspacing='1' style='font-size:10px; border:1px solid black; border-collapse: collapse' nowrap>
        <tr style='font-size:12px;'>
            <th valign='top' nowrap><b>Task/PBI ID</b></th>
            <th valign='top' nowrap><b>Work Item Type</b></th>
            <th valign='top' nowrap><b>Task/PBI Description</b></th>
            <th valign='top' nowrap><b>Tags</b></th>
            <th valign='top' nowrap><b>Approval status</b></th>
            <th valign='top' nowrap><b>State</b></th>
        
        </tr>"
$workItemIdslist = @()
for ($i = 0; $i -lt $workItemIds.Count; $i++) {
    $workItemIdslist += [Int64]$workItemIds[$i].target.id
}
Write-Host "Work Item IDs has been collected and going to next step"
$sortedworkItemIdslist = $workItemIdslist |Sort-Object -Descending
foreach($workItemId in $sortedworkItemIdslist)
{
    # $sourceWorkItemId = $projectReportingQueryResult.workItemRelations[$i].source.id
    # $targetWorkItemId = $WorkitemsQueryResult.workItemRelations[$i].target.id
    
    $workuri = "https://dev.azure.com/$($organization)/Apx/_apis/wit/workitems?ids=$($workItemId)&api-version=7.1-preview.3"
    $workresponse= Invoke-RestMethod -Uri $workuri -Method Get -Headers $headers 
    $workItemResponse = $workresponse.value
    for($i=0;$i -lt $workItemResponse.Count;$i++){
        # $workupdates = $workItemResponse[$i].fields #|Where-Object {$_.'System.IterationPath' -eq "APX\Sprint 173"} 
        if ($null -ne $workItemResponse[$i].fields.PSObject.Properties['System.Tags'] -and $workItemResponse[$i].fields.'System.Tags' -match "Change Request") {
            if ($workItemResponse[$i].fields.'System.Tags' -match "Hot Fix" -or $workItemResponse[$i].fields.'System.Tags' -match "Data Fix" -and $workItemResponse[$i].fields.'System.state' -ne "Removed") {
                $tags = $workItemResponse[$i].fields.'System.Tags'
                $state = $workItemResponse[$i].fields.'System.state'
                $title = $workItemResponse[$i].fields.'System.Title'
                $workitemtype=$workItemResponse[$i].fields.'System.WorkItemType'
                if ($workItemResponse[$i].fields.'System.state' -eq "Done") {
                    $Commentsuri = "https://dev.azure.com/$($organization)/Apx/_apis/wit/workItems/$($workItemId)/comments?$top=2&api-version=7.1-preview.4"
                    $Commentresponse= Invoke-RestMethod -Uri $Commentsuri -Method Get -Headers $headers 
                    $Commentsresult = $Commentresponse|Where-Object{$_.comments.Text -match "approve"}
                    if ($null -ne $Commentsresult) {
                        $approvedstatus = "Yes/Approved"
                        $approvedWorkitemHtml += "<tr style='font-size:12px;' nowrap>
                                <td nowrap><a href='https://$($organization).visualstudio.com/Apx/_workitems/edit/$($workItemId)'>$($workItemId)</a></td>
                                <td align ='left' nowrap>$($workitemtype)</td> 
                                <td align ='left' nowrap>$($title)</td> 
                                <td align ='left' nowrap>$($tags)</td>
                                <td align ='left' nowrap>$($approvedstatus)</td>
                                <td align ='left' nowrap>$($state)</td> 
                            </tr>" 
                    }
                    else {
                        $approvedstatus = "No/Not Approved"
                        $notapprovedWorkitemHtml += "<tr style='font-size:12px;' nowrap>
                                <td nowrap><a href='https://$($organization).visualstudio.com/Apx/_workitems/edit/$($workItemId)'>$($workItemId)</a></td>
                                <td align ='left' nowrap>$($workitemtype)</td> 
                                <td align ='left' nowrap>$($title)</td> 
                                <td align ='left' nowrap>$($tags)</td>
                                <td align ='left' nowrap>$($approvedstatus)</td>
                                <td align ='left' nowrap>$($state)</td> 
                            </tr>" 
                    }
                    
                } 
                elseif ($workItemResponse[$i].fields.'System.state' -eq "To Do" -or $workItemResponse[$i].fields.'System.state' -eq "In Progress") {
                    if ($workItemResponse[$i].fields.'System.WorkItemType' -ne "Task") {
                        $Commentsuri = "https://dev.azure.com/$($organization)/Apx/_apis/wit/workItems/$($workItemId)/comments?$top=2&api-version=7.1-preview.4"
                        $Commentresponse= Invoke-RestMethod -Uri $Commentsuri -Method Get -Headers $headers 
                        $Commentsresult = $Commentresponse|Where-Object{$_.comments.Text -match "approve"}
                        if ($null -ne $Commentsresult) {
                            $approvedstatus = "Yes/Approved"
                            $approvedWorkitemHtml += "<tr style='font-size:12px;' nowrap>
                                <td nowrap><a href='https://$($organization).visualstudio.com/Apx/_workitems/edit/$($workItemId)'>$($workItemId)</a></td>
                                <td align ='left' nowrap>$($workitemtype)</td> 
                                <td align ='left' nowrap>$($title)</td> 
                                <td align ='left' nowrap>$($tags)</td>
                                <td align ='left' nowrap>$($approvedstatus)</td>
                                <td align ='left' nowrap>$($state)</td> 
                            </tr>" 
                        }
                        else {
                            $approvedstatus = "No/Not Approved"
                            $notapprovedWorkitemHtml += "<tr style='font-size:12px;' nowrap>
                                <td nowrap><a href='https://$($organization).visualstudio.com/Apx/_workitems/edit/$($workItemId)'>$($workItemId)</a></td>
                                <td align ='left' nowrap>$($workitemtype)</td> 
                                <td align ='left' nowrap>$($title)</td> 
                                <td align ='left' nowrap>$($tags)</td>
                                <td align ='left' nowrap>$($approvedstatus)</td>
                                <td align ='left' nowrap>$($state)</td> 
                            </tr>" 
                        }
                    }
                    else {
                        $Commentsuri = "https://dev.azure.com/$($organization)/Apx/_apis/wit/workItems/$($workItemId)/comments?$top=2&api-version=7.1-preview.4"
                        $Commentresponse= Invoke-RestMethod -Uri $Commentsuri -Method Get -Headers $headers 
                        $Commentsresult = $Commentresponse|Where-Object{$_.comments.Text -match "approve"}
                        if ($null -ne $Commentsresult) {
                            $approvedstatus = "Yes/Approved"
                            $approvedWorkitemHtml += "<tr style='font-size:12px;' nowrap>
                                <td nowrap><a href='https://$($organization).visualstudio.com/Apx/_workitems/edit/$($workItemId)'>$($workItemId)</a></td>
                                <td align ='left' nowrap>$($workitemtype)</td> 
                                <td align ='left' nowrap>$($title)</td> 
                                <td align ='left' nowrap>$($tags)</td>
                                <td align ='left' nowrap>$($approvedstatus)</td>
                                <td align ='left' nowrap>$($state)</td> 
                            </tr>" 
                        }
                        
                    }
                } 
                else {
                    $Commentsuri = "https://dev.azure.com/$($organization)/Apx/_apis/wit/workItems/$($workItemId)/comments?$top=2&api-version=7.1-preview.4"
                    $Commentresponse= Invoke-RestMethod -Uri $Commentsuri -Method Get -Headers $headers 
                    $Commentsresult = $Commentresponse|Where-Object{$_.comments.Text -match "approve"}
                    if ($null -ne $Commentsresult) {
                        $approvedstatus = "Yes/Approved"
                        $approvedWorkitemHtml += "<tr style='font-size:12px;' nowrap>
                                <td nowrap><a href='https://$($organization).visualstudio.com/Apx/_workitems/edit/$($workItemId)'>$($workItemId)</a></td>
                                <td align ='left' nowrap>$($workitemtype)</td> 
                                <td align ='left' nowrap>$($title)</td> 
                                <td align ='left' nowrap>$($tags)</td>
                                <td align ='left' nowrap>$($approvedstatus)</td>
                                <td align ='left' nowrap>$($state)</td> 
                            </tr>" 
                    }
                    else {
                        $approvedstatus = "No/Not yet Approved"
                        $notapprovedWorkitemHtml += "<tr style='font-size:12px;' nowrap>
                                <td nowrap><a href='https://$($organization).visualstudio.com/Apx/_workitems/edit/$($workItemId)'>$($workItemId)</a></td>
                                <td align ='left' nowrap>$($workitemtype)</td> 
                                <td align ='left' nowrap>$($title)</td> 
                                <td align ='left' nowrap>$($tags)</td>
                                <td align ='left' nowrap>$($approvedstatus)</td>
                                <td align ='left' nowrap>$($state)</td> 
                            </tr>" 
                    }
                }  
            }
            Write-Host "Data Pulled for " $workItemId 
            
        }
       
        
    }
    
}
$approvedWorkitemHtml += "</table></tbody>"
$notapprovedWorkitemHtml += "</table></tbody>"
    
    
    $body += $notapprovedWorkitemHtml
    $body += $approvedWorkitemHtml
    

    # # compose and send out email messages to individuals who have booked to at least one task in the sprint
    Write-Host "-------------------------------------------------------------------------------------------"
    Write-Host "Sending out email " 
    $email=("")
    $emailSubject = "Incorrect Change Request Status"
    Start-Sleep -s 15

    $SMTP_SERVER = "smtp.socketlabs.com"
    $SMTP_PORT = 587
    $SMTP_USERNAME = "server4507"
    $PWORD = ConvertTo-SecureString -String $info -AsPlainText -Force
    $bccEmailList = ("")
    # $email = ("")
    # $cred = New-Object -TypeName System.Management.Automation.PSCredential($SMTP_USERNAME, $PWORD)
    $SMTPClient = New-Object System.Net.Mail.SmtpClient
    $SMTPClient.Host = $SMTP_SERVER
    $SMTPClient.Port = $SMTP_PORT
    $SMTPClient.EnableSsl = $true
    $SMTPClient.Credentials = New-Object System.Net.NetworkCredential($SMTP_USERNAME, $PWORD)
    $message= New-Object System.Net.Mail.MailMessage
    $message.From = ""
    foreach($mailid in $bccEmailList)
    {
        $message.Bcc.Add($mailid)
    }
    $message.To.Add($email)
    $message.Subject = $emailSubject
    $message.Body = $body
    # $message.cc.Add($bccEmailList)
    $message.IsBodyHtml = $true
    # Send-MailMessage -SmtpServer $SMTP_SERVER -Port $SMTP_PORT -Credential $cred -To $email -Bcc $bccEmailList -From "" -Subject $emailSubject -Body $body -BodyAsHtml
    try {
        # Send-MailMessage -To $email -SmtpServer $SMTP_SERVER -Port $SMTP_PORT -Credential $cred -Bcc $bccEmailList -From "" -Subject $emailSubject -Body $body -BodyAsHtml
        $SMTPClient.Send($message)
        $SMTPClient.Dispose()
        $message.Dispose()
        $body = $null
        $approvedWorkitemHtml = $null
        $notapprovedWorkitemHtml = $null
        
    }
    catch {
        $_.Exception.message
    }


